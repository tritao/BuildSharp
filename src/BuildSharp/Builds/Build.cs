using System;
using System.Collections.Generic;
using BuildSharp.VersionControl;

namespace BuildSharp.Builds
{
    /// <summary>
    /// Represents the different states for a build.
    /// </summary>
    public enum BuildState
    {
        Queued,
        Running,
        Failed,
        Success
    }

    /// <summary>
    /// Event data for build state changes.
    /// </summary>
    public class BuildStateChangedEventArgs : EventArgs
    {
        public BuildState State;
    }

    /// <summary>
    /// Represents a build in the build system.
    /// </summary>
    public class Build
    {
        /// <summary>
        /// The id of the build.
        /// </summary>
        public int Id;

        private BuildState state;

        /// <summary>
        /// The current state of the build.
        /// </summary>
        public BuildState State
        {
            get { return state; }
            set
            {
                state = value;
                StateChanged(this,
                    new BuildStateChangedEventArgs { State = value });
            }
        }

        /// <summary>
        /// Project referenced by the build.
        /// </summary>
        public Project Project;

        /// <summary>
        /// Commit referenced by the build.
        /// </summary>
        public Commit Commit;

        /// <summary>
        /// Event triggered when the build state is changed.
        /// </summary>
        public EventHandler<BuildStateChangedEventArgs> StateChanged
            = delegate { };

        /// <summary>
        /// Build steps executed by the build.
        /// </summary>
        public List<BuildStep> Steps { get; set; }

        /// <summary>
        /// Returns true if the build has completed.
        /// </summary>
        public bool Completed
        {
            get { return State == BuildState.Success; }
        }

        /// <summary>
        /// Runner-specific build information.
        /// </summary>
        public object Info;

        /// <summary>
        /// Output generated by the build.
        /// </summary>
        public BuildOutput Output;

        /// <summary>
        /// Represents the time when the build was created.
        /// </summary>
        public readonly DateTime Created;

        /// <summary>
        /// Represents the build configuration associated to this build.
        /// </summary>
        public readonly BuildConfiguration Configuration;

        public Build(Project project, Commit commit, BuildConfiguration buildConfig)
        {
            State = BuildState.Queued;
            Project = project;
            Commit = commit;
            Created = DateTime.UtcNow;
            Output = new BuildOutput();
            Configuration = buildConfig;
        }

        /// <summary>
        /// Starts the build by running all the build steps.
        /// </summary>
        public void Start()
        {
            State = BuildState.Running;
        }

        /// <summary>
        /// Stops the build if it's already running.
        /// </summary>
        public void Stop()
        {
            State = BuildState.Failed;
        }

        public override string ToString()
        {
            return string.Format("{{id: {0}, config: {1}}}", Id, Configuration);
        }
    }

    /// <summary>
    /// Exception thrown when there is a build problem.
    /// </summary>
    public class BuildException : Exception
    {
        public BuildException(string message) : base(message)
        {
        }
    }
}
